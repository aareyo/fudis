import { ArgTypes, Meta, Canvas } from "@storybook/blocks";
import { linkTo } from "@storybook/addon-links";
import { DescriptionListComponent } from "./description-list.component.ts";
import * as DescriptionListStories from "./description-list.stories.ts";
import { Source } from "@storybook/blocks";

<Meta title="Components/Description List" />

# Description List Component

Description List displays a list of key value pairs. The value can also contain an optional sub-header value. Description List is built using child components, as shown in following code example:

<Source of={DescriptionListStories.DescriptionList} />

Alternative list can be generated by passing `data` input attribute to the parent components. `Data` is an array consisting of objects of interface `FudisDescriptionListItem`.

<Source code={`
interface FudisDescriptionListItem {
  key: string;
  subHeading?: string;
  value: string;
}

<fudis-description-list [data]="data"/>`} />

## Examples

Description List has two different variants, default 'regular' list and 'compact'. **Description List extends Grid API so it can take all same inputs as Fudis Grid. E. g. `width`, `columns` and `align`.** Fudis Grid can be disabled in Description List by setting `disableGrid` as true.

### Description List Compact Variant

<Canvas of={DescriptionListStories.DescriptionList}></Canvas>

### Including Interactive Sub-Components

It is possible to incluce buttons or other interactive elements in Description List Item Detail (fudis-dd) by using `ng-template fudisActions type="dd"` for description list. This following example displayes, how Fudis Button is used inside of Description List.

<Canvas of={DescriptionListStories.DescriptionListWithSubComponents}></Canvas>

### With Language Badge Group

Description List with Language Badge Group displays list details with translations. The use of language options requires that component is build in template from sub components. It's also good to note that Description List with Language Badge Group is designed to be used only with Description List **regular** variant.

How to use:

1. Description List Item Term (fudis-dt) -element takes an boolean value `languages`. By setting languages as `true`, Description List will render a Language Badge Group next to description list key label.
2. In order to link Language Badge with selected translation, Description List Item Detail (fudis-dd) takes an `lang` input, which will specify the language used in fudis-dd content. `lang` input uses `FudisLanguageAbbr` type, that have predefined languages of English, Finnish and Swedish. When language option is used, all of the fudis-dd elements need a suited lang input. If any of the three predefined `lang` inputs are missing, Fudis Language Badge Group will display this translation as missing.

<Canvas of={DescriptionListStories.DescriptionListWithLanguages}></Canvas>

### Accessibility

- Description List component wraps list content into `dl` element
- Each list item term is being described is contained within a `dt` element
- Each description term is contained in one or more `dd` element
- Description detail elements `dd` are placed directly after description term `dt` element

### Related components / directives

- [Grid](/docs/components-grid-grid--example)
- [Icon](/docs/components-icon--icon)
- [ButtonComponent](/docs/components-button--button)

## Properties

<ArgTypes of={DescriptionListComponent} />
