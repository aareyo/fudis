import { ArgTypes, Meta, Canvas } from "@storybook/blocks";
import { AlertGroupComponent } from "./alert-group/alert-group.component.ts";

<Meta title="Components/Alert Group" />

# Alert Group

`Alert Group` component displays list of toaster-like `Alert` components with four variants: `success`, `info`, `warning` and `danger.` These variants are same ones as with `Notification` component.

## Adding and dismissing Alerts

`Alert Group` listens to `FudisAlertService` where application or UI sends information about adding or dismissing alerts.

### Add new alert

To add new alert, send an object of type `FudisAlert` to `FudisAlertService` using `addAlert()`.

Note that `id` doesn't need to be unique for AlertService.

```
constructor(
	private _alertService: FudisAlertService
	) {
		const newAlert: FudisAlert = {
			message: 'Well done, a new alert is displayed!',
			type: 'success',
			id: 'well-done-identifier',
		};

		_alertService.addAlert(newAlert);
	}
```

### Add new alert with routerLink

It has been discussed with designers, that using alerts with links should be avoided, as it can cause confusion for users, as they need to focus on multiple interactive areas in the UI. But if a link is needed, both `routerLinkUrl` and `linkTitle` must be provided.

```
const alertWithLink: FudisAlert = {
			message: 'You need to adjust your settings.',
			type: 'warning',
			routerLinkUrl: '/your-routerlink-url/to/destination'
			linkTitle: 'Move to your settings.'
			id: 'move-to-settings-warning-identifier',
		};

		_alertService.addAlert(alertWithLink);
```

### Dismiss alert

#### Dismiss by id

Previously sent alert can be dismissed with `dismissAlert()`. It will dismiss all alerts with `id` provided. So if for example you have sent multiple alerts with same `id`, all of them will be dismissed.

```
_alertService.dismissAlert('well-done-identifier');
```

#### Dismiss all

All alerts can be dismissed by calling `dismissAll()`.

```
_alertService.dismissAll();
```

#### Dismiss from UI

When user click alert's close button, it will dismiss that single alert from the service. But it will still leave all other alerts with the same `id`.

## Positioning and with Fudis Dialog

Usually Alert Group is positioned to the top of the screen right after navigation.

CSS `position` of Alert Group can be set using `position` attribute with three currently provided options. By default it is `fixed` but can be set to `static` or `absolute` as well.

Fudis automatically embeddes Alert Group inside every Dialog, so that new and existing alerts are visible and available for keyboard users when Dialog is open.

## Accessibility and keyboard behavior

### Alerts without a link

Alerts without links and with variant `danger` or `warning` are communicated to screen readers, as they have html attribute of `role='alert'`. Other variants have `role='status'`. Focus does not change even if new alert appears.

### With links

With links, the focus will move to that link newly added alert, so that keyboard users can more easily react to it if needed.

### When closing alert

When user closes an alert, focus will move automatically to the last alert in the list. If there are no alerts left, Alert Group tries to return focus in that element of the UI the focus was before focusing on the alert.

### With Fudis Dialog open

Fudis Dialog has a focus trap, so that keyboard are not able to navigate outside dialog until Dialog is closed. If there are alerts visible, those are included as focusable elements inside Dialog's focus trap. If user closes all the alerts when dialog is open, focus returns to Dialog's close button.

### Other mentionable accessibility details

- Focusable elements inside alert have visible focus state.
- `Danger` and `warning` alerts without links are communicated to user using `role='alert'` attribute.
- Contrast between background colors and text meet accessibility criteria.
- Alert Group is wrapped inside a `section` element which has an automatic `aria-label` describing its content. E. g. 'Notifications - Number of notifications: 5'
- Elements used in Alert Group have proper labels as needed for screen reader users.

## Properties

<ArgTypes of={AlertGroupComponent} />
