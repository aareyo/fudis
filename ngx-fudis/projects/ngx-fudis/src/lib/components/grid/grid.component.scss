/* stylelint-disable order/order */

@use '../../foundations/breakpoints/mixins.scss' as breakpoints;
@use '../../foundations/breakpoints/tokens.scss' as breakpointTokens;
@use '../../foundations/grid/mixins.scss' as grid;
@use '../../foundations/grid/tokens.scss' as gridTokens;
@use '../../foundations/spacing/tokens.scss' as spacingTokens;

.fudis-grid {
	display: grid;
	grid-template-columns: 1fr;
	min-width: gridTokens.$grid-min-width;

	/* stylelint-disable-next-line scss/selector-no-redundant-nesting-selector */
	& > fudis-heading {
		grid-column: 1/-1;
	}

	&__align {
		&__left {
			margin-right: auto;
			margin-left: 0;

			@include breakpoints.breakpoint-max('s') {
				@include grid.grid-xs-margins;
			}
		}

		&__center {
			margin-right: auto;
			margin-left: auto;

			@include breakpoints.breakpoint-max('s') {
				@include grid.grid-xs-margins;
			}
		}

		&__right {
			margin-right: 0;
			margin-left: auto;

			@include breakpoints.breakpoint-max('s') {
				@include grid.grid-xs-margins;
			}
		}
	}

	&__margin {
		&__top {
			&__zero {
				margin-top: spacingTokens.$spacing-zero;
			}

			&__xxs {
				margin-top: spacingTokens.$spacing-xxs;
			}

			&__xs {
				margin-top: spacingTokens.$spacing-xs;
			}

			&__s {
				margin-top: spacingTokens.$spacing-s;
			}

			&__m {
				margin-top: spacingTokens.$spacing-m;
			}

			&__l {
				margin-top: spacingTokens.$spacing-l;
			}

			&__xl {
				margin-top: spacingTokens.$spacing-xl;
			}

			&__xxl {
				margin-top: spacingTokens.$spacing-xxl;
			}
		}

		&__bottom {
			&__zero {
				margin-bottom: spacingTokens.$spacing-zero;
			}

			&__xxs {
				margin-bottom: spacingTokens.$spacing-xxs;
			}

			&__xs {
				margin-bottom: spacingTokens.$spacing-xs;
			}

			&__s {
				margin-bottom: spacingTokens.$spacing-s;
			}

			&__m {
				margin-bottom: spacingTokens.$spacing-m;
			}

			&__l {
				margin-bottom: spacingTokens.$spacing-l;
			}

			&__xl {
				margin-bottom: spacingTokens.$spacing-xl;
			}

			&__xxl {
				margin-bottom: spacingTokens.$spacing-xxl;
			}
		}
	}

	/*
	By default Grid's @Input width is XXL. When viewport gets narrower, it will get corresponding max-widths of each smaller breakpoint from XXL to smallest XS.

	On the other end, if @Input width is the smallest of XS, it gets only one max-width of XS and doesn't need any other breakpoint width logic.

	*/

	&__xxl {
		@include breakpoints.breakpoint('xs') {
			@include grid.grid-max-width('xs')
		}

		@include breakpoints.breakpoint('s') {
			@include grid.grid-max-width('s')
		}

		@include breakpoints.breakpoint('m') {
			@include grid.grid-max-width('m')
		}	
	
		@include breakpoints.breakpoint('l') {
			@include grid.grid-max-width('l')
		}

		@include breakpoints.breakpoint('xl') {
		@include grid.grid-max-width('xl')
		}

		@include breakpoints.breakpoint('xxl') {
			@include grid.grid-max-width('xxl')
		}
	}
	
	&__xl {
		@include breakpoints.breakpoint('xs') {
			@include grid.grid-max-width('xs')
		}

		@include breakpoints.breakpoint('s') {
			@include grid.grid-max-width('s')
		}

		@include breakpoints.breakpoint('m') {
			@include grid.grid-max-width('m')
		}	
	
		@include breakpoints.breakpoint('l') {
			@include grid.grid-max-width('l')
		}

		@include breakpoints.breakpoint('xl') {
		@include grid.grid-max-width('xl')
		}
	}

	&__l {
		@include breakpoints.breakpoint('xs') {
			@include grid.grid-max-width('xs')
		}

		@include breakpoints.breakpoint('s') {
			@include grid.grid-max-width('s')
		}

		@include breakpoints.breakpoint('m') {
			@include grid.grid-max-width('m')
		}	
	
		@include breakpoints.breakpoint('l') {
			@include grid.grid-max-width('l')
		}
	}

	&__m {
		@include breakpoints.breakpoint('xs') {
			@include grid.grid-max-width('xs')
		}

		@include breakpoints.breakpoint('s') {
			@include grid.grid-max-width('s')
		}

		@include breakpoints.breakpoint('m') {
			@include grid.grid-max-width('m')
		}	
	}

	&__s {
		@include breakpoints.breakpoint('xs') {
			@include grid.grid-max-width('xs')
		}

		@include breakpoints.breakpoint('s') {
			@include grid.grid-max-width('s')
		}
	}

	&__xs {
		@include grid.grid-max-width('xs')
	}
}