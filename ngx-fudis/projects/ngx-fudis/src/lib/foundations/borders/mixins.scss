@use 'sass:map';
@use '../colors/tokens.scss' as colors;
@use '../spacing/tokens.scss' as spacing;
@use './tokens.scss' as borderTokens;


// Generates border, i. e.:
// border: 2px solid $primary-dark;
@mixin fudis-border($width, $style, $color) {
	@if map_has_key(spacing.$fudis-pixel-tokens, $width) and map_has_key(borderTokens.$fudis-border-styles, $style) and map_has_key(colors.$fudis-colors, $color) {
		/* stylelint-disable-next-line property-disallowed-list */
		border: map.get(spacing.$fudis-pixel-tokens, $width) map.get(borderTokens.$fudis-border-styles, $style) map.get(colors.$fudis-colors, $color);
	}

 @else {
		@error 'Unknown fudis-border parameter. Please check foundations/borders/mixins.scss for accepted arguments.';
	}
}

// Generates outline, i. e.:
// outline: 2px solid $primary-dark;
@mixin fudis-outline($width, $style, $color) {
	@if map_has_key(spacing.$fudis-pixel-tokens, $width) and map_has_key(borderTokens.$fudis-border-styles, $style) and map_has_key(colors.$fudis-colors, $color) {
		/* stylelint-disable-next-line property-disallowed-list */
		outline: map.get(spacing.$fudis-pixel-tokens, $width) map.get(borderTokens.$fudis-border-styles, $style) map.get(colors.$fudis-colors, $color);
		outline-offset: -(map.get(spacing.$fudis-pixel-tokens, $width));
	}

 @else {
		@error 'Unknown fudis-border parameter. Please check foundations/borders/mixins.scss for accepted arguments.';
	}
}


@mixin fudis-border-radius($width) {
	@if map_has_key(spacing.$fudis-pixel-tokens, $width) {
		border-radius: map.get(spacing.$fudis-pixel-tokens, $width);
	}

 @else {
		@error 'Unknown border-radius of #{$width}. It can only be "1px", "2px" or "3px"';
	}
}

@mixin fudis-border-none($style) {
	@if map_has_key(borderTokens.$fudis-border-styles, $style) {
		/* stylelint-disable-next-line property-disallowed-list */
		border: map.get(borderTokens.$fudis-border-styles, $style);
	}

	@else {
		@error 'Unknown border of #{$style}. It can only be "none" for fudis-border-none mixin';
	}
}

